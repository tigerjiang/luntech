package com.luntech.launcher.db;import java.util.ArrayList;import java.util.List;import android.content.Context;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;public class DBDao {	private DataOpenHelper dbHelper;	private Context context;	public static String SORT_MODE_DESC = "desc";	public static String SORT_MODE_ASC = "asc";	public DBDao(Context _context) {		context = _context;		dbHelper = new DataOpenHelper(context);	}	/**	 * 获取DB对象	 * 	 * @return SQLiteDatabase	 */	public SQLiteDatabase getDB() {		// DatabaseHelper dbHelper = new DatabaseHelper(context);		SQLiteDatabase db = dbHelper.getWritableDatabase();		return db;	}	/**	 * 插入新数据	 * 	 * @param audio	 */	public void insert(AudioItem audio) {		// DatabaseHelper dbHelper = new DatabaseHelper(context);		SQLiteDatabase db = dbHelper.getWritableDatabase();		StringBuffer sql = new StringBuffer();		sql.append("insert into " + DatabaseHelper.TABLE_NAME + " (")				.append("audioid , ")				.append("tvid , ")				.append("operationtype , ")				.append("audioname , ")				.append("audioduration , ")				.append("audiofilename , ")				.append("audioupdatetime , ")				.append("programname , ")				.append("downloadstatus ,")				.append("lastdownloadfilesize , ")				.append("playstatus , ")				.append("totalfilesize , ")				.append("audioplayurl , ")				.append("audiodownloadurl , ")				.append("audiopostimgurl ,")				.append("audiologoimgurl , ")				.append("audioinfo , ")				.append("broadcastday , ")				.append("lastplayposition , ")				.append("audioimage ) ")				.append("values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?) ");		String playUrl = audio.getAudioPlayUrl().size() > 0 ? audio				.getAudioPlayUrl().get(0) : "";		String downloadUrl = audio.getAudioDownloadUrl().size() > 0 ? audio				.getAudioDownloadUrl().get(0) : "";		Object[] conditions = new Object[] { audio.getAudioId(),				audio.getTvId(), audio.getOperationType(),				audio.getAudioName(), audio.getAudioDuration(),				audio.getAudioFileName(), audio.getAudioUpdateTime(),				audio.getProgramName(), audio.getDownLoadStatus(),				audio.getLastDownloadFileSize(), audio.getPlayStatus(),				audio.getTotalFileSize(), playUrl, downloadUrl,				audio.getAudioPostUrl(), audio.getAudioLogoUrl(),				audio.getAudioInfo(), audio.getBroadcastDay(),				audio.getLastPlayPosition(), audio.getAudioImage() };		db.execSQL(sql.toString(), conditions);		// db.close();	}	/**	 * 更新数据	 * 	 * @param audio	 */	public void update(AudioItem audio) {		if (audio != null) {			// DatabaseHelper dbHelper = new DatabaseHelper(context);			SQLiteDatabase db = dbHelper.getWritableDatabase();			StringBuffer sql = new StringBuffer();			sql.append("update " + DatabaseHelper.TABLE_NAME + " set ")					.append("audioid = ?, ").append("tvid = ?, ")					.append("operationtype = ?, ").append("audioname = ?, ")					.append("audioduration = ?, ")					.append("audiofilename = ?, ")					.append("audioupdatetime = ?, ")					.append("programname = ?, ").append("downloadstatus = ?,")					.append("lastdownloadfilesize = ?, ")					.append("playstatus = ?, ").append("totalfilesize = ?, ")					.append("audioplayurl = ?, ")					.append("audiodownloadurl = ?, ")					.append("audiopostimgurl = ?,")					.append("audiologoimgurl = ?, ").append("audioinfo = ?, ")					.append("broadcastday = ?, ")					.append("lastplayposition = ?, ").append("audioimage = ? ")					.append("where _id =? ");			String playUrl = audio.getAudioPlayUrl().size() > 0 ? audio					.getAudioPlayUrl().get(0) : "";			String downloadUrl = audio.getAudioDownloadUrl().size() > 0 ? audio					.getAudioDownloadUrl().get(0) : "";			Object[] conditions = new Object[] { audio.getAudioId(),					audio.getTvId(), audio.getOperationType(),					audio.getAudioName(), audio.getAudioDuration(),					audio.getAudioFileName(), audio.getAudioUpdateTime(),					audio.getProgramName(), audio.getDownLoadStatus(),					audio.getLastDownloadFileSize(), audio.getPlayStatus(),					audio.getTotalFileSize(), playUrl, downloadUrl,					audio.getAudioPostUrl(), audio.getAudioLogoUrl(),					audio.getAudioInfo(), audio.getBroadcastDay(),					audio.getLastPlayPosition(), audio.getAudioImage(),					audio.getId() };			db.execSQL(sql.toString(), conditions);			// db.close();		}	}	/**	 * 删除数据	 * 	 * @param audio	 */	public void delete(AudioItem audio) {		// DatabaseHelper dbHelper = new DatabaseHelper(context);		SQLiteDatabase db = dbHelper.getWritableDatabase();		db.execSQL(				"delete from " + DatabaseHelper.TABLE_NAME + " where _id=? ",				new Object[] { audio.getId() });		// db.close();	}	/**	 * 删除数据	 * 	 * @param audioId	 * @param operationType	 */	public void delete(int audioId, String operationType) {		// DatabaseHelper dbHelper = new DatabaseHelper(context);		SQLiteDatabase db = dbHelper.getWritableDatabase();		db.execSQL("delete from " + DatabaseHelper.TABLE_NAME				+ " where audioid=? and operationtype =? ", new Object[] {				audioId, operationType });		// db.close();	}	/**	 * 记录是否存在	 * 	 * @param audioId	 * @param operationType	 * @return boolean	 */	public boolean isExisteForAudio(int audioId, String operationType) {		boolean result = false;		// DatabaseHelper dbHelper = new DatabaseHelper(context);		SQLiteDatabase db = dbHelper.getReadableDatabase();		Cursor cursor = db.rawQuery("select * from "				+ DatabaseHelper.TABLE_NAME				+ " where audioid=? and operationtype=? ", new String[] {				String.valueOf(audioId), operationType });		if (cursor != null) {			if (cursor.getCount() > 0) {				result = true;			}		}		cursor.close();		// db.close();		return result;	}	/**	 * 记录是否存在	 * 	 * @param audioId	 * @param operationType	 * @return boolean	 */	public boolean isDownLoadedForAudio(int audioId, String downloadStatus) {		boolean result = false;		// DatabaseHelper dbHelper = new DatabaseHelper(context);		SQLiteDatabase db = dbHelper.getReadableDatabase();		Cursor cursor = db.rawQuery("select * from "				+ DatabaseHelper.TABLE_NAME				+ " where audioid=? and downloadstatus=? ", new String[] {				String.valueOf(audioId), downloadStatus });		if (cursor != null) {			if (cursor.getCount() > 0) {				result = true;			}		}		cursor.close();		// db.close();		return result;	}	/**	 * 获取单条数据方法	 * 	 * @param audioId	 * @param operationType	 * @return AudioItem	 */	public AudioItem getAudio(int audioId, String operationType) {		// DatabaseHelper dbHelper = new DatabaseHelper(context);		SQLiteDatabase db = dbHelper.getReadableDatabase();		Cursor cursor = db.rawQuery("select * from "				+ DatabaseHelper.TABLE_NAME				+ " where audioid=? and operationtype =? ", new String[] {				String.valueOf(audioId), operationType });		if (cursor.moveToFirst() && cursor.getCount() == 1) {			AudioItem audio = new AudioItem();			audio.setId(cursor.getInt(cursor.getColumnIndex("_id")));			audio.setAudioId(cursor.getInt(1));			audio.setTvId(cursor.getInt(2));			audio.setOperationType(cursor.getString(3));			audio.setAudioName(cursor.getString(4));			audio.setAudioDuration(cursor.getString(5));			audio.setAudioFileName(cursor.getString(6));			audio.setAudioUpdateTime(cursor.getString(7));			audio.setProgramName(cursor.getString(8));			audio.setDownLoadStatus(cursor.getString(9));			audio.setLastDownloadFileSize(cursor.getInt(10));			audio.setPlayStatus(cursor.getString(11));			audio.setTotalFileSize(cursor.getInt(12));			audio.addAudioPlayUrl(cursor.getString(13));			audio.addAudioDownloadUrl(cursor.getString(14));			audio.setAudioPostUrl(cursor.getString(15));			audio.setAudioLogoUrl(cursor.getString(16));			audio.setAudioInfo(cursor.getString(17));			audio.setBroadcastDay(cursor.getString(18));			audio.setLastPlayPosition(cursor.getInt(19));			audio.setAudioImage(cursor.getBlob(20));			return audio;		}		cursor.close();		// db.close();		return null;	}	/**	 * 获取数据集合	 * 	 * set list to fill data	 * 	 * @param whereCondition	 * @param whereParams	 * @param sortMode	 * @return List<AudioItem>	 */	public void findByList(List<AudioItem> audioList, String whereCondition,			String[] whereParams, String sortMode) {		if (audioList != null) {			// DatabaseHelper dbHelper = new DatabaseHelper(context);			SQLiteDatabase db = dbHelper.getReadableDatabase();			Cursor cursor = db.query(DatabaseHelper.TABLE_NAME,					new String[] { "*" }, whereCondition, whereParams, null,					null, "_id " + sortMode);			if (cursor != null) {				// cursor.moveToFirst();				for (int i = 0; i < cursor.getCount(); i++) {					cursor.moveToPosition(i);					AudioItem audio = new AudioItem();					audio.setId(cursor.getInt(cursor.getColumnIndex("_id")));					audio.setAudioId(cursor.getInt(1));					audio.setTvId(cursor.getInt(2));					audio.setOperationType(cursor.getString(3));					audio.setAudioName(cursor.getString(4));					audio.setAudioDuration(cursor.getString(5));					audio.setAudioFileName(cursor.getString(6));					audio.setAudioUpdateTime(cursor.getString(7));					audio.setProgramName(cursor.getString(8));					audio.setDownLoadStatus(cursor.getString(9));					audio.setLastDownloadFileSize(cursor.getInt(10));					audio.setPlayStatus(cursor.getString(11));					audio.setTotalFileSize(cursor.getInt(12));					audio.addAudioPlayUrl(cursor.getString(13));					audio.addAudioDownloadUrl(cursor.getString(14));					audio.setAudioPostUrl(cursor.getString(15));					audio.setAudioLogoUrl(cursor.getString(16));					audio.setAudioInfo(cursor.getString(17));					audio.setBroadcastDay(cursor.getString(18));					audio.setLastPlayPosition(cursor.getInt(19));					audio.setAudioImage(cursor.getBlob(20));					audioList.add(audio);				}				cursor.close();			}			// db.close();		}	}	/**	 * 获取数据集合	 * 	 * @param whereCondition	 * @param whereParams	 * @param sortMode	 * @return List<AudioItem>	 */	public List<AudioItem> findByList(String whereCondition,			String[] whereParams, String sortMode) {		List<AudioItem> audioList = new ArrayList<AudioItem>();		if (audioList != null) {			// DatabaseHelper dbHelper = new DatabaseHelper(context);			SQLiteDatabase db = dbHelper.getReadableDatabase();			Cursor cursor = db.query(DatabaseHelper.TABLE_NAME,					new String[] { "*" }, whereCondition, whereParams, null,					null, "_id " + sortMode);			if (cursor != null) {				// cursor.moveToFirst();				for (int i = 0; i < cursor.getCount(); i++) {					cursor.moveToPosition(i);					AudioItem audio = new AudioItem();					audio.setId(cursor.getInt(cursor.getColumnIndex("_id")));					audio.setAudioId(cursor.getInt(1));					audio.setTvId(cursor.getInt(2));					audio.setOperationType(cursor.getString(3));					audio.setAudioName(cursor.getString(4));					audio.setAudioDuration(cursor.getString(5));					audio.setAudioFileName(cursor.getString(6));					audio.setAudioUpdateTime(cursor.getString(7));					audio.setProgramName(cursor.getString(8));					audio.setDownLoadStatus(cursor.getString(9));					audio.setLastDownloadFileSize(cursor.getInt(10));					audio.setPlayStatus(cursor.getString(11));					audio.setTotalFileSize(cursor.getInt(12));					audio.addAudioPlayUrl(cursor.getString(13));					audio.addAudioDownloadUrl(cursor.getString(14));					audio.setAudioPostUrl(cursor.getString(15));					audio.setAudioLogoUrl(cursor.getString(16));					audio.setAudioInfo(cursor.getString(17));					audio.setBroadcastDay(cursor.getString(18));					audio.setLastPlayPosition(cursor.getInt(19));					audio.setAudioImage(cursor.getBlob(20));					audioList.add(audio);				}				cursor.close();			}			// db.close();		}		return audioList;	}	/**	 * 分组查询	 * 	 * @param audioList	 * @param groupbyfield	 * @param having	 * @param sortMode	 */	public void groupByList(List<AudioItem> audioList, String groupbyfield,			String having, String sortMode) {		if (audioList != null) {			// DatabaseHelper dbHelper = new DatabaseHelper(context);			SQLiteDatabase db = dbHelper.getReadableDatabase();			Cursor cursor = db.query(DatabaseHelper.TABLE_NAME,					new String[] { "*" }, null, null, groupbyfield, having,					sortMode);			if (cursor != null) {				// cursor.moveToFirst();				for (int i = 0; i < cursor.getCount(); i++) {					cursor.moveToPosition(i);					AudioItem audio = new AudioItem();					audio.setId(cursor.getInt(cursor.getColumnIndex("_id")));					audio.setAudioId(cursor.getInt(1));					audio.setTvId(cursor.getInt(2));					audio.setOperationType(cursor.getString(3));					audio.setAudioName(cursor.getString(4));					audio.setAudioDuration(cursor.getString(5));					audio.setAudioFileName(cursor.getString(6));					audio.setAudioUpdateTime(cursor.getString(7));					audio.setProgramName(cursor.getString(8));					audio.setDownLoadStatus(cursor.getString(9));					audio.setLastDownloadFileSize(cursor.getInt(10));					audio.setPlayStatus(cursor.getString(11));					audio.setTotalFileSize(cursor.getInt(12));					audio.addAudioPlayUrl(cursor.getString(13));					audio.addAudioDownloadUrl(cursor.getString(14));					audio.setAudioPostUrl(cursor.getString(15));					audio.setAudioLogoUrl(cursor.getString(16));					audio.setAudioInfo(cursor.getString(17));					audio.setBroadcastDay(cursor.getString(18));					audio.setLastPlayPosition(cursor.getInt(19));					audio.setAudioImage(cursor.getBlob(20));					audioList.add(audio);				}				cursor.close();			}			// db.close();		}	}	/**	 * 分组查询	 * 	 * @param groupbyfield	 * @param having	 * @param sortMode	 * @return	 */	public List<AudioItem> groupByList(String groupbyfield, String having,			String sortMode) {		List<AudioItem> audioList = new ArrayList<AudioItem>();		if (audioList != null) {			// DatabaseHelper dbHelper = new DatabaseHelper(context);			SQLiteDatabase db = dbHelper. getReadableDatabase();			Cursor cursor = db.query(DatabaseHelper.TABLE_NAME,					new String[] { "*" }, " operationtype=?",					new String[] { "downloaded" }, groupbyfield, having,					sortMode);			if (cursor != null) {				// cursor.moveToFirst();				for (int i = 0; i < cursor.getCount(); i++) {					cursor.moveToPosition(i);					AudioItem audio = new AudioItem();					audio.setId(cursor.getInt(cursor.getColumnIndex("_id")));					audio.setAudioId(cursor.getInt(1));					audio.setTvId(cursor.getInt(2));					audio.setOperationType(cursor.getString(3));					audio.setAudioName(cursor.getString(4));					audio.setAudioDuration(cursor.getString(5));					audio.setAudioFileName(cursor.getString(6));					audio.setAudioUpdateTime(cursor.getString(7));					audio.setProgramName(cursor.getString(8));					audio.setDownLoadStatus(cursor.getString(9));					audio.setLastDownloadFileSize(cursor.getInt(10));					audio.setPlayStatus(cursor.getString(11));					audio.setTotalFileSize(cursor.getInt(12));					audio.addAudioPlayUrl(cursor.getString(13));					audio.addAudioDownloadUrl(cursor.getString(14));					audio.setAudioPostUrl(cursor.getString(15));					audio.setAudioLogoUrl(cursor.getString(16));					audio.setAudioInfo(cursor.getString(17));					audio.setBroadcastDay(cursor.getString(18));					audio.setLastPlayPosition(cursor.getInt(19));					audio.setAudioImage(cursor.getBlob(20));					audioList.add(audio);				}				cursor.close();			}			// db.close();		}		return audioList;	}		/**	 * 分组查询	 * 	 * @param groupbyfield	 * @param having	 * @param sortMode	 * @return	 */	public List<AudioItem> groupByListFinishedType(String condition,String groupbyfield, String having,			String sortMode) {		List<AudioItem> audioList = new ArrayList<AudioItem>();		if (audioList != null) {			// DatabaseHelper dbHelper = new DatabaseHelper(context);			SQLiteDatabase db = dbHelper.getReadableDatabase();			Cursor cursor = db.query(DatabaseHelper.TABLE_NAME,					new String[] { "*" }, " operationtype=? and downloadstatus =?",					new String[] { "downloaded",condition }, groupbyfield, having,					sortMode);			if (cursor != null) {				// cursor.moveToFirst();				for (int i = 0; i < cursor.getCount(); i++) {					cursor.moveToPosition(i);					AudioItem audio = new AudioItem();					audio.setId(cursor.getInt(cursor.getColumnIndex("_id")));					audio.setAudioId(cursor.getInt(1));					audio.setTvId(cursor.getInt(2));					audio.setOperationType(cursor.getString(3));					audio.setAudioName(cursor.getString(4));					audio.setAudioDuration(cursor.getString(5));					audio.setAudioFileName(cursor.getString(6));					audio.setAudioUpdateTime(cursor.getString(7));					audio.setProgramName(cursor.getString(8));					audio.setDownLoadStatus(cursor.getString(9));					audio.setLastDownloadFileSize(cursor.getInt(10));					audio.setPlayStatus(cursor.getString(11));					audio.setTotalFileSize(cursor.getInt(12));					audio.addAudioPlayUrl(cursor.getString(13));					audio.addAudioDownloadUrl(cursor.getString(14));					audio.setAudioPostUrl(cursor.getString(15));					audio.setAudioLogoUrl(cursor.getString(16));					audio.setAudioInfo(cursor.getString(17));					audio.setBroadcastDay(cursor.getString(18));					audio.setLastPlayPosition(cursor.getInt(19));					audio.setAudioImage(cursor.getBlob(20));					audioList.add(audio);				}				cursor.close();			}			// db.close();		}		return audioList;	}				/**	 * 分组查询	 * 	 * @param groupbyfield	 * @param having	 * @param sortMode	 * @return	 */	public List<AudioItem> groupByListunFinishedType(String condition,String groupbyfield, String having,			String sortMode) {		List<AudioItem> audioList = new ArrayList<AudioItem>();		if (audioList != null) {			// DatabaseHelper dbHelper = new DatabaseHelper(context);			SQLiteDatabase db = dbHelper.getReadableDatabase();			Cursor cursor = db.query(DatabaseHelper.TABLE_NAME,					new String[] { "*" }, " operationtype=? and downloadstatus !=?",					new String[] { "downloaded",condition }, groupbyfield, having,					sortMode);			if (cursor != null) {				// cursor.moveToFirst();				for (int i = 0; i < cursor.getCount(); i++) {					cursor.moveToPosition(i);					AudioItem audio = new AudioItem();					audio.setId(cursor.getInt(cursor.getColumnIndex("_id")));					audio.setAudioId(cursor.getInt(1));					audio.setTvId(cursor.getInt(2));					audio.setOperationType(cursor.getString(3));					audio.setAudioName(cursor.getString(4));					audio.setAudioDuration(cursor.getString(5));					audio.setAudioFileName(cursor.getString(6));					audio.setAudioUpdateTime(cursor.getString(7));					audio.setProgramName(cursor.getString(8));					audio.setDownLoadStatus(cursor.getString(9));					audio.setLastDownloadFileSize(cursor.getInt(10));					audio.setPlayStatus(cursor.getString(11));					audio.setTotalFileSize(cursor.getInt(12));					audio.addAudioPlayUrl(cursor.getString(13));					audio.addAudioDownloadUrl(cursor.getString(14));					audio.setAudioPostUrl(cursor.getString(15));					audio.setAudioLogoUrl(cursor.getString(16));					audio.setAudioInfo(cursor.getString(17));					audio.setBroadcastDay(cursor.getString(18));					audio.setLastPlayPosition(cursor.getInt(19));					audio.setAudioImage(cursor.getBlob(20));					audioList.add(audio);				}				cursor.close();			}			// db.close();		}		return audioList;	}		/**	 * 关闭数据库	 */	public void destory() {		dbHelper.close();	}	}