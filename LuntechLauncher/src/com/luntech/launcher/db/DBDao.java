package com.luntech.launcher.db;import java.util.ArrayList;import android.content.Context;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;public class DBDao {    private DataOpenHelper dbHelper;    private Context context;    public static String SORT_MODE_DESC = "desc";    public static String SORT_MODE_ASC = "asc";    public DBDao(Context _context) {        context = _context;        dbHelper = new DataOpenHelper(context);    }    /**     * 获取DB对象     *      * @return SQLiteDatabase     */    public SQLiteDatabase getDB() {        // DatabaseHelper dbHelper = new DatabaseHelper(context);        SQLiteDatabase db = dbHelper.getWritableDatabase();        return db;    }    /**     * 插入新数据     *      * @param AppItem     */    public void insert(AppItem app) {        // DatabaseHelper dbHelper = new DatabaseHelper(context);        SQLiteDatabase db = dbHelper.getWritableDatabase();        StringBuffer sql = new StringBuffer();        sql.append("insert into " + DataOpenHelper.APP_TABLE_NAME + " (")                .append("a_name , ")                .append("a_package , ")                .append("a_activity , ")                .append("a_icon , ")                .append("a_url , ")                .append("m_code , ")                .append("m_replace , ")                .append("m_type , ")                .append("m_text ,")                .append("m_bg , ")                .append("m_icon , ")                .append("m_shadow , ")                .append("g_code , ")                .append("g_moveable , ")                .append("g_flag ,")                .append("g_text , ")                .append("g_bg , ")                .append("g_icon ) ")                .append("values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ");        Object[] conditions = new Object[] {                app.getAppName(), app.getAppPackage(), app.getAppActivity(), app.getAppIcon(),                app.getAppUrl(),                app.getModuleCode(), app.getModuleReplace(), app.getModuleType(),                app.getModuleText(), app.getModuleBg(), app.getModuleBg(), app.getModuleShadow(),                app.getGroupCode(), app.getGroupMoveable(), app.getGroupFlag(), app.getGroupText(),                app.getGroupBg(), app.getGroupIcon()        };        db.execSQL(sql.toString(), conditions);    }    /**     * 更新数据     *      * @param audio     */    public void updateReplace(AppItem app) {        if (app != null) {            // DatabaseHelper dbHelper = new DatabaseHelper(context);            SQLiteDatabase db = dbHelper.getWritableDatabase();            StringBuffer sql = new StringBuffer();            sql.append("update " + DataOpenHelper.APP_TABLE_NAME + " set ")                    .append("a_replace_package = ?, ").append("a_has_replace = ?, ")                    .append("where a_package =? ");            Object[] conditions = new Object[] {                    app.getReplacePackage(),                    app.getHasReplace(),                    app.getAppPackage()            };            db.execSQL(sql.toString(), conditions);        }    }    /**     * 更新数据     *      * @param audio     */    public void updateDownload(AppItem app) {        if (app != null) {            // DatabaseHelper dbHelper = new DatabaseHelper(context);            SQLiteDatabase db = dbHelper.getWritableDatabase();            StringBuffer sql = new StringBuffer();            sql.append("update " + DataOpenHelper.APP_TABLE_NAME + " set ")                    .append("download_id = ?, ").append("download_status = ?, ")                    .append("a_file_name = ?, ")                    .append("where a_package =? ");            Object[] conditions = new Object[] {                    app.getDownloadId(),                    app.getDownloadStatus(),                    app.getFileName(),                    app.getAppPackage()            };            db.execSQL(sql.toString(), conditions);        }    }    /**     * 删除数据     *      * @param audio     */    public void delete(AppItem app) {        // DatabaseHelper dbHelper = new DatabaseHelper(context);        SQLiteDatabase db = dbHelper.getWritableDatabase();        db.execSQL(                "delete from " + DataOpenHelper.APP_TABLE_NAME + " where a_package=? ",                new Object[] {                    app.getAppPackage()                });    }    /**     * 更新替换应用数据     *      * @param audioId     * @param operationType     */    public void setReplaceInfo(AppItem app) {        if (app != null) {            // DatabaseHelper dbHelper = new DatabaseHelper(context);            SQLiteDatabase db = dbHelper.getWritableDatabase();            StringBuffer sql = new StringBuffer();            sql.append("update " + DataOpenHelper.APP_TABLE_NAME + " set ")                    .append("a_replace_package = ?, ").append("a_has_replace = ?, ")                    .append("where a_package =? ");            Object[] conditions = new Object[] {                    app.getReplacePackage(),                    app.getHasReplace(),                    app.getAppPackage()            };            db.execSQL(sql.toString(), conditions);        }    }    /**     * 记录下载信息     *      * @param audioId     * @param operationType     * @return boolean     */    public boolean isDownLoadedForApp(String pkg, String downloadStatus) {        boolean result = false;        // DatabaseHelper dbHelper = new DatabaseHelper(context);        SQLiteDatabase db = dbHelper.getReadableDatabase();        Cursor cursor = db.rawQuery("select * from "                + DataOpenHelper.APP_TABLE_NAME                + " where pkg=? and download_status=? ", new String[] {                String.valueOf(pkg), downloadStatus        });        if (cursor != null) {            if (cursor.getCount() > 0) {                result = true;            }        }        cursor.close();        return result;    }    public AppItem fetchApp(String pkg) {        SQLiteDatabase db = dbHelper.getReadableDatabase();        Cursor cursor = db.rawQuery("select * from "                + DataOpenHelper.APP_TABLE_NAME                + " where a_package=? ", new String[] {            pkg        });        AppItem app = null;        boolean result = cursor.moveToFirst();        if (result)            app = populate(cursor);        cursor.close();        return app;    }    /**     * 获取数据集合 list     *      * @param whereCondition     * @param whereParams     * @param sortMode     * @return List<AudioItem>     */    public ArrayList<AppItem> fetchAppList() {        ArrayList<AppItem> appList = new ArrayList<AppItem>();        // DatabaseHelper dbHelper = new DatabaseHelper(context);        SQLiteDatabase db = dbHelper.getReadableDatabase();        Cursor cursor = db.query(DataOpenHelper.APP_TABLE_NAME,                new String[] {                    "*"                }, null, null, null,                null, "g_code " + SORT_MODE_DESC);        if (cursor != null) {            cursor.moveToFirst();            while (!cursor.isAfterLast()) {                appList.add(populate(cursor));                cursor.moveToNext();            }        }        cursor.close();        return appList;    }    /**     * 根据Module code数据集合 list     *      * @param whereCondition     * @param whereParams     * @param sortMode     * @return List<AudioItem>     */    public ArrayList<AppItem> fetchAppListByModule(String moduleCode) {        ArrayList<AppItem> appList = new ArrayList<AppItem>();        // DatabaseHelper dbHelper = new DatabaseHelper(context);        SQLiteDatabase db = dbHelper.getReadableDatabase();        Cursor cursor = db.query(DataOpenHelper.APP_TABLE_NAME,                new String[] {                    "*"                }, "m_code =? ", new String[] {                    moduleCode                }, null,                null, "_id " + SORT_MODE_DESC);        if (cursor != null) {            cursor.moveToFirst();            while (!cursor.isAfterLast()) {                appList.add(populate(cursor));                cursor.moveToNext();            }        }        cursor.close();        return appList;    }    /**     * 根据Module code数据集合 list     *      * @param whereCondition     * @param whereParams     * @param sortMode     * @return List<AudioItem>     */    public ArrayList<AppItem> fetchAppListByGroup(String groupCode) {        ArrayList<AppItem> appList = new ArrayList<AppItem>();        // DatabaseHelper dbHelper = new DatabaseHelper(context);        SQLiteDatabase db = dbHelper.getReadableDatabase();        Cursor cursor = db.query(DataOpenHelper.APP_TABLE_NAME,                new String[] {                    "*"                }, "g_code =? ", new String[] {                    groupCode                }, null,                null, "_id " + SORT_MODE_DESC);        if (cursor != null) {            cursor.moveToFirst();            while (!cursor.isAfterLast()) {                appList.add(populate(cursor));                cursor.moveToNext();            }        }        cursor.close();        return appList;    }    /**     * 关闭数据库     */    public void destory() {        dbHelper.close();    }    private AppItem populate(Cursor c) {        AppItem app = new AppItem();        app.setDownloadId(c.getInt(c.getColumnIndexOrThrow(AppContract.Columns.Download_id)));        app.setDownloadStatus(c.getString(c                .getColumnIndexOrThrow(AppContract.Columns.DOWNLOAD_STATUS)));        app.setAppName(c.getString(c.getColumnIndexOrThrow(AppContract.Columns.A_NAME)));        app.setAppName(c.getString(c.getColumnIndexOrThrow(AppContract.Columns.A_PACKAGE)));        app.setAppName(c.getString(c.getColumnIndexOrThrow(AppContract.Columns.A_REPLACE_PACKAGE)));        app.setAppName(c.getString(c.getColumnIndexOrThrow(AppContract.Columns.A_HAS_REPLACE)));        app.setAppName(c.getString(c.getColumnIndexOrThrow(AppContract.Columns.A_ACTIVITY)));        app.setAppName(c.getString(c.getColumnIndexOrThrow(AppContract.Columns.A_ICON)));        app.setAppName(c.getString(c.getColumnIndexOrThrow(AppContract.Columns.A_URL)));        app.setAppName(c.getString(c.getColumnIndexOrThrow(AppContract.Columns.A_FILE_NAME)));        app.setAppName(c.getString(c.getColumnIndexOrThrow(AppContract.Columns.M_CODE)));        app.setAppName(c.getString(c.getColumnIndexOrThrow(AppContract.Columns.M_REPLACE)));        app.setAppName(c.getString(c.getColumnIndexOrThrow(AppContract.Columns.M_TYPE)));        app.setAppName(c.getString(c.getColumnIndexOrThrow(AppContract.Columns.M_TEXT)));        app.setAppName(c.getString(c.getColumnIndexOrThrow(AppContract.Columns.M_BG)));        app.setAppName(c.getString(c.getColumnIndexOrThrow(AppContract.Columns.M_ICON)));        app.setAppName(c.getString(c.getColumnIndexOrThrow(AppContract.Columns.M_SHADOW)));        app.setAppName(c.getString(c.getColumnIndexOrThrow(AppContract.Columns.G_CODE)));        app.setAppName(c.getString(c.getColumnIndexOrThrow(AppContract.Columns.G_MOVEABLE)));        app.setAppName(c.getString(c.getColumnIndexOrThrow(AppContract.Columns.G_FLAG)));        app.setAppName(c.getString(c.getColumnIndexOrThrow(AppContract.Columns.G_TEXT)));        app.setAppName(c.getString(c.getColumnIndexOrThrow(AppContract.Columns.G_BG)));        app.setAppName(c.getString(c.getColumnIndexOrThrow(AppContract.Columns.G_ICON)));        return null;    }}